# -*- coding: utf-8 -*-
"""diabetes_SVM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T58KiVG_cKNSs2Bak9P8LEppq0RP8ieb
"""

from google.colab import drive
drive.mount('/content/drive')

dosya_yolu = '/content/drive/MyDrive/Colab Notebooks/diabetes/diabetes.csv'

# Gerekli kütüphaneleri yükleme
import pandas as pd
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix, roc_curve, roc_auc_score, accuracy_score, precision_score, recall_score, f1_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report
import seaborn as sns
import numpy as np

# Veri setini yükleme
df = pd.read_csv(dosya_yolu)

# Veri setini görüntüleme
df.head()

# Veri seti kolon isimleri
df.columns

# Veri seti kolon veritipleri
df.info()

# satır ve sütun sayıları
df.shape

# kolonlara ait istatistiki bilgiler
df.describe()

# kolonlarda boş değerler var mı
df.isnull().sum()

# 1 ve 0 lardan oluşan sonuç kümem de bulunan 0 ve 1 lerin sayısal grafiği
sns.countplot(x='Outcome',data=df,palette=['b','g'])

# veri setindeki değişkenler arasındaki ilişkileri görselleştirmek
sns.pairplot(data=df,hue='Outcome')
plt.show()

# Özellikler ve hedef değişkeni ayırma
X = df.drop(["Outcome"], axis=1)
y = df["Outcome"]

# Eğitim ve test setlerine ayırma
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# SVM algoritmasını uygulama
svm = SVC(kernel='linear')

# Modeli eğitme
svm.fit(X_train, y_train)

# test verilerindeki girdiler için sınıf tahminleri yapmak
y_predict=svm.predict(X_test)
y_predict

# confusion matris
cm=confusion_matrix(y_test,y_predict)
cm

# confusion matris renkli tablosu
sns.heatmap(pd.DataFrame(cm),annot=True, cmap="Greens")

# Modelin doğruluğu
accuracy=accuracy_score(y_test,y_predict)
print("Accuracy : ",round(accuracy,2)*100,'%')

# Performans metriklerinin hesaplanması
accuracy = accuracy_score(y_test, y_predict)
precision = precision_score(y_test, y_predict)
recall = recall_score(y_test, y_predict)
f1 = f1_score(y_test, y_predict)

# Performans metriklerini ekrana yazdırma
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

# ROC eğrisi ve AUC değeri
y_pred_prob = svm.predict_proba(X_test)[:, 1]
fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)
roc_auc = roc_auc_score(y_test, y_pred_prob)

# ROC grafiği çizimi
plt.plot(fpr, tpr, label='ROC Curve (AUC = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], 'k--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic')
plt.legend(loc="lower right")
plt.show()

# Örnek bir girdi için sonuç tahmini
example_input = [8,99,84,0,0,35.4,0.388,50] #0
predicted_class = svm.predict([example_input])[0]
print("Tahmin edilen sınıf: ", predicted_class)

# Örnek bir girdi için sonuç tahmini
example_input = [6,148,72,35,0,33.6,0.627,50] #1
predicted_class = svm.predict([example_input])[0]
print("Tahmin edilen sınıf: ", predicted_class)

# Örnek bir girdi için sonuç tahmini
example_input = [5,166,72,19,175,25.8,0.587,51] #1
predicted_class = svm.predict([example_input])[0]
print("Tahmin edilen sınıf: ", predicted_class)

# RBF çekirdek kullanılıyor
svm = SVC(kernel='rbf')

# Modeli eğit
svm.fit(X_train, y_train)

# Test veri seti üzerinde tahmin yap
y_pred = svm.predict(X_test)

# Performans metriklerinin hesaplanması
accuracy = accuracy_score(y_test, y_predict)
precision = precision_score(y_test, y_predict)
recall = recall_score(y_test, y_predict)
f1 = f1_score(y_test, y_predict)

# Performans metriklerini ekrana yazdırma
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

# Polynomial çekirdek kullanılıyor
svm = SVC(kernel='poly', degree=3) # 3. dereceden polinom çekirdek kullanılıyor

# Modeli eğit
svm.fit(X_train, y_train)

# Test veri seti üzerinde tahmin yap
y_pred = svm.predict(X_test)

# Performans metriklerinin hesaplanması
accuracy = accuracy_score(y_test, y_predict)
precision = precision_score(y_test, y_predict)
recall = recall_score(y_test, y_predict)
f1 = f1_score(y_test, y_predict)

# Performans metriklerini ekrana yazdırma
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)